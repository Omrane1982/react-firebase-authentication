{"version":3,"sources":["config/fire.js","login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","e","preventDefault","auth","signInWithEmailAndPassword","state","email","password","catch","error","console","log","signup","createUserWithEmailAndPassword","then","u","handleChange","setState","defineProperty","target","name","value","react_default","a","createElement","className","class","for","onChange","type","id","aria-describedby","placeholder","onClick","style","marginLeft","Component","Home","logout","signOut","App","user","authListener","_this2","onAuthStateChanged","src_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a638eb0.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyALZT_P8za_BxZdJwZ4JMBlSVnthkVH-2Q\",\r\n    authDomain: \"omrane-app.firebaseapp.com\",\r\n    databaseURL: \"https://omrane-app.firebaseio.com\",\r\n    projectId: \"omrane-app\",\r\n    storageBucket: \"omrane-app.appspot.com\",\r\n    messagingSenderId: \"709194376140\",\r\n    appId: \"1:709194376140:web:6faf5aa60af84947\"\r\n  };\r\n  // Initialize Firebase\r\n  const fire=firebase.initializeApp(firebaseConfig);\r\n  export default fire;\r\n","import React,{Component} from 'react';\r\n\r\nimport fire from './config/fire';\r\n\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            email:'',\r\n            password:''\r\n        }\r\n    }\r\n    login=(e)=>{\r\n        e.preventDefault();\r\n        fire.auth().signInWithEmailAndPassword(this.state.email,this.state.password).catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    signup=(e)=>{\r\n        e.preventDefault();\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email,this.state.password).then((u)=>{\r\n\r\n        }).catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"col-md-6\">\r\n                <form>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"exempleInputEmail\">Email adress</label>\r\n                        <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exempleInputEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"/>\r\n                        <small id=\"emailHelp\" class=\"form-text text-muted\">we'll never share your email with anyone else.</small>\r\n=\r\n                    </div>\r\n                    <div>\r\n                    <label for=\"exempleInputPassword\"> Password adress</label>\r\n                        <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exempleInputPassword\" aria-describedby=\"PasswordHelp\" placeholder=\"Enter Password\"/>\r\n                        <small id=\"emailHelp\" class=\"form-text text-muted\">we'll never share your email with anyone else.</small>\r\n=  \r\n                    </div>\r\n                    <div>\r\n                    <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\r\n                    <button onClick={this.signup} style={{marginLeft:'25px'}} className=\"btn btn-success\">Signup</button>\r\n                    </div>\r\n\r\n                    \r\n                </form>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Login;","import React,{Component} from 'react';\r\nimport fire from './config/fire';\r\n\r\nclass Home extends Component{\r\n    logout=()=>{\r\n        fire.auth().signOut();\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"col-md-6\">\r\n           <h1> you are in Home</h1>\r\n           <button onClick={this.logout}>Logout</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Home;","import React, {Component} from 'react';\nimport fire from'./config/fire';\nimport './App.css';\nimport Login from'./login';\nimport Home from './Home';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      user:{},\n    }\n  }\n  componentDidMount(){\n    this.authListener();\n  }\n  authListener(){\n    fire.auth().onAuthStateChanged((user)=>{\n      console.log(user);\n      if (user){\n        this.setState({user});\n        // localStorage.setItem('user, user.uid');\n      }else{\n        this.setState({user:null});\n        // localStorage.removeItel('user');\n      }\n    });\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.user? (<Home/>):(<Login/>)}\n\n        \n      </div>\n    );\n  }\n\n  }\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}